#include<stdio.h>
#include<stdlib.h>
/* Utility function to find max value */
int max(int a, int b) { 
	 	return (a > b)? a : b; 
	} 
int knapsack(int w[], int p[], int n, int W) {
	int i, wt;
	int **dpTable; // Auxiliary 2-D table to store results computed
	dpTable = (int**)malloc((n + 1) * sizeof(int*));
	for (i = 0; i < n + 1; i++)
		dpTable[i] = (int*)malloc((W + 1) * sizeof(int));
	
	// Base case: if either n or W is 0, the maximum value that can be obtained is 0.
	int j=0;
	for (i = 0; i <= n; i++)
		dpTable[i][0] = 0;
	for (j = 0; j <= W; j++)
		dpTable[0][j] = 0;
	
	// Fill up the dpTable[][] in a bottom-up manner using iterative approach.
	for (i = 1; i <= n; i++) {
		for (j = 1; j <= W; j++) {
			if (w[i-1] > j)
				dpTable[i][j] = dpTable[i-1][j];
			else
				dpTable[i][j] = max(dpTable[i-1][j], p[i-1] + dpTable[i-1][j-w[i-1]]);
		}
	}

    
    return dpTable[n][W];
}
 
/* Driver code */
int main() {
	int i, j, n;
	int W;  //capacity of knapsack
	int Max; // To store the final profit
	int *w;  //weight of items
	int *p;  //value of items
	printf("Enter the no. of items: ");
	scanf("%d",&n);
	w = (int *)malloc(n*sizeof(int));
	p = (int *)malloc(n*sizeof(int));
	printf("Enter the weight and price of all items\n");
	for(i = 0;i < n;i++)
		scanf("%d%d",&w[i],&p[i]);
    printf("enter the capacity of knapsack: ");
    scanf("%d",&W);
    Max =  knapsack(w,p,n,W);
    printf("The maximum value of items that can be put into knapsack is: %d ", Max);
}