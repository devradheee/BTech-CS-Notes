typedef char COLOR;
struct node {
	int data;
	COLOR color;
	struct node *left, *right,*parent;
};
typedef struct node * RBNODE;
RBNODE root = NULL;

void leftRotate(RBNODE x) {
	RBNODE y = x->right;
	x->right = y->left;
	if (y->left != NULL) {
		y->left->parent = x;
	}
	y->parent = x->parent;
	if (x->parent == NULL) {
		root = y;
	}
	else if (x == x->parent->left) {
		x->parent->left = y;
	}
	else {
		x->parent->right = y;
	}
	y->left = x;
	x->parent = y;
	
}

void rightRotate(RBNODE y) {
	RBNODE x = y->left;
	y->left = x->right;
	if (x->right != NULL) {
		x->right->parent = y;
	}
	x->parent = y->parent;
	if (y->parent == NULL) {
		root = x;
	}
	else if (y == y->parent->left) {
		y->parent->left = x;
	}
	else {
		y->parent->right = x;
	}
	x->right = y;
	y->parent = x;
}

void colorInsert(RBNODE z) {
	RBNODE y = NULL;
	while (z->parent != NULL && z->parent->color == 'R') {
		if (z->parent == z->parent->parent->left) {
			y = z->parent->parent->right;
			if (y != NULL && y->color == 'R') {
				z->parent->color = 'B';
				y->color = 'B';
				z->parent->parent->color = 'R';
				z = z->parent->parent;
			}
			else {
				if (z == z->parent->right) {
					z = z->parent;
					leftRotate(z);
				}
				z->parent->color = 'B';
				z->parent->parent->color = 'R';
				rightRotate(z->parent->parent);
			}
		}
		else {
			y = z->parent->parent->left;
			if (y != NULL && y->color == 'R') {
				z->parent->color = 'B';
				y->color = 'B';
				z->parent->parent->color = 'R';
				z = z->parent->parent;
			}
			else {
				if (z == z->parent->left) {
					z = z->parent;
					rightRotate(z);
				}
				z->parent->color = 'B';
				z->parent->parent->color = 'R';
				leftRotate(z->parent->parent);
			}
		}
	}
	root->color = 'B';
	
}

int searchNodeInRB(int val) {
	RBNODE temp = root;
	while (temp != NULL) {
		if (temp->data == val) {
			return 1;
		}
		else if (temp->data > val) {
			temp = temp->left;
		}
		else {
			temp = temp->right;
		}
	}
	return 0;
}



void insertNodeInRB(int ele) {
	
	if (searchNodeInRB(ele)) {
		printf("Entered element already exists in the RBTree.\n");
		return;
	}
	RBNODE z = (RBNODE)malloc(sizeof(struct node));
	z->data = ele;
	z->color = 'R';
	z->left = NULL;
	z->right = NULL;
	z->parent = NULL;
	RBNODE y = NULL;
	RBNODE x = root;
	while (x != NULL) {
		y = x;
		if (z->data < x->data) {
			x = x->left;
		}
		else {
			x = x->right;
		}
	}
	z->parent = y;
	if (y == NULL) {
		root = z;
	}
	else if (z->data < y->data) {
		y->left = z;
	}
	else {
		y->right = z;
	}
	colorInsert(z);
}

void inorderInRB(RBNODE root) {
	if (root != NULL) {
		inorderInRB(root->left);
		printf("%d", root->data);
		if(root->color == 'R')printf("(r)  ");
		else printf("(b)  ");
		inorderInRB(root->right);
	}
	
}



