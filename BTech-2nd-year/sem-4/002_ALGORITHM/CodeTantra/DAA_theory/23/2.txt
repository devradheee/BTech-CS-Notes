#include<stdio.h>
#include<malloc.h>
#include<string.h>
#define NO_OF_CHARS 256 
int max(int a,int b){
	if(a>b)return a;return b;
}
void badCharHeuristic(char* pat, int pat_len, int badchar[NO_OF_CHARS]) 
{ 
	int i; 
	
	// Initialize all occurrences as -1 
	for (i = 0; i < NO_OF_CHARS; i++) 
	badchar[i] = -1; 
	
	// Fill the actual value of last occurrence of a character 
	for (i = 0; i < pat_len; i++) 
	badchar[(int) pat[i]] = i; 
} 

void search(char *txt, char *pat) 
{ 
	int m = strlen(pat); 
	int n = strlen(txt); 
	
	int badchar[NO_OF_CHARS]; 
	
	badCharHeuristic(pat, m, badchar); 
	
	int s = 0;  // s is shift of the pattern with respect to text 
	while(s <= (n - m)) 
	{ 
		int j = m-1; 
		
		// Keep reducing index j of pattern while characters of 
		// pattern and text are matching at this shift s 
		while(j >= 0 && pat[j] == txt[s+j]) 
		j--; 
		
		// If the pattern is present at current shift, then index j 
		// will become -1 after the above loop 
		if (j < 0) 
		{ 
			printf("Found the pattern at index %d\n", s); 
			
			// Shift the pattern so that the next character in text 
			// aligns with the last occurrence of it in pattern. 
			s += (s+m < n)? m-badchar[txt[s+m]] : 1; 
			
		} 
		
		else
		// Shift the pattern so that the bad character in text 
		// aligns with the last occurrence of it in pattern. The 
		// max function is used to make sure that we get a positive 
		// shift. We may get a negative shift if the last occurrence 
		// of bad character in pattern is on the right side of the 
		// current character. 
		s += max(1, j - badchar[txt[s+j]]); 
	} 
} 
 
int main() {
	char *txt,*pat;
	txt = (char*) malloc(NO_OF_CHARS*sizeof(char));
	pat = (char*) malloc(NO_OF_CHARS*sizeof(char));
	printf("Enter the text: ");
	gets(txt);
	printf("Enter the pattern to be searched: ");
	gets(pat);
	search(txt, pat); 
	return 0; 
} 
