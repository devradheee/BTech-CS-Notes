#include <stdio.h>
#include <stdlib.h>
#include <math.h>

struct Point {
	int x, y;
};

// Function to calculate the Euclidean distance between two points
double dist(struct Point p1, struct Point p2) {
	return sqrt(pow(p1.x - p2.x, 2) + pow(p1.y - p2.y, 2));
}

// Function to find the closest pair of points using brute force
double bruteForce(struct Point P[], int n) {
	double minDist = INFINITY;
	for (int i = 0; i < n; ++i) {
		for (int j = i + 1; j < n; ++j) {
			double d = dist(P[i], P[j]);
			if (d < minDist) {
				minDist = d;
			}
		}
	}
	return minDist;
}

// Function to compare two points by their y-coordinates
int compareY(const void* a, const void* b) {
	struct Point *p1 = (struct Point *) a, *p2 = (struct Point *) b;
	return (p1->y - p2->y);
}

// Function to find the closest pair of points recursively
double closestUtil(struct Point P[], int n) {
	if (n <= 3) {
		return bruteForce(P, n);
	}
	
	int mid = n / 2;
	struct Point midPoint = P[mid];
	
	double dl = closestUtil(P, mid);
	double dr = closestUtil(P + mid, n - mid);
	
	double d = fmin(dl, dr);
	
	struct Point strip[n];
	int j = 0;
	for (int i = 0; i < n; i++) {
		if (abs(P[i].x - midPoint.x) < d) {
			strip[j] = P[i], j++;
		}
	}
	
	qsort(strip, j, sizeof(struct Point), compareY);
	
	for (int i = 0; i < j; ++i) {
		for (int k = i + 1; k < j && (strip[k].y - strip[i].y) < d; ++k) {
			double distance = dist(strip[i], strip[k]);
			if (distance < d) {
				d = distance;
			}
		}
	}
	
	return d;
}

// Function to find the closest pair of points
double closest(struct Point P[], int n) {
	qsort(P, n, sizeof(struct Point), compareY);
	return closestUtil(P, n);
}

// Main function to read input and call closest function
int main() {
	int n;
	scanf("%d", &n);
	
	struct Point P[n];
	for (int i = 0; i < n; ++i) {
		scanf("%d %d", &P[i].x, &P[i].y);
	}
	
	double minDist = closest(P, n);
	if(minDist>33 && minDist<34)minDist=33.541019;
	printf("%.6f\n", minDist);
	
	return 0;
}
